# TCL File Generated by Component Editor 15.0
# Mon Jun 15 17:02:22 CDT 2015
# DO NOT MODIFY


# 
# OpenLDI_TX "OpenLDI_TX" v1.0
#  2015.06.15.17:02:22
# 
# 

# 
# request TCL package from ACDS 15.0
# 
package require -exact qsys 15.0
package require altera_terp


# 
# module OpenLDI_TX
# 
set_module_property DESCRIPTION ""
set_module_property NAME OpenLDI_TX
set_module_property VERSION 1.0
set_module_property INTERNAL false
set_module_property OPAQUE_ADDRESS_MAP true
set_module_property AUTHOR ""
set_module_property DISPLAY_NAME OpenLDI_TX
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE true
set_module_property REPORT_TO_TALKBACK false
set_module_property ALLOW_GREYBOX_GENERATION false
set_module_property REPORT_HIERARCHY false
set_module_property ELABORATION_CALLBACK elaborate
set_module_property SUPPORTED_DEVICE_FAMILIES {{Stratix 10} {Stratix V} {Arria 10} {Arria V} {Arria V GZ} {Cyclone IV} {Cyclone IV E}  {Cyclone V} {MAX 10}}


# 
# file sets
# 
add_fileset QUARTUS_SYNTH QUARTUS_SYNTH generate
add_fileset SIM_VERILOG SIM_VERILOG generate
add_fileset SIM_VHDL SIM_VHDL generate


# 
# parameters
# 
# 
add_parameter "DEVICE_FAMILY" string "Stratix V"
set_parameter_property "DEVICE_FAMILY" HDL_PARAMETER true
set_parameter_property "DEVICE_FAMILY" DISPLAY_NAME "Device family"
set_parameter_property "DEVICE_FAMILY" ALLOWED_RANGES { "Stratix 10" "Arria 10" "MAX 10" "Stratix V" "Arria V" "Arria V GZ" "Cyclone V" "Cyclone IV E" "Cyclone IV GX" }
set_parameter_property "DEVICE_FAMILY" DESCRIPTION "Displays the device family"
set_parameter_property "DEVICE_FAMILY" AFFECTS_GENERATION true
set_parameter_property "DEVICE_FAMILY" ENABLED 0
add_display_item "Device Options" "DEVICE_FAMILY" PARAMETER 
set_parameter_property "DEVICE_FAMILY" SYSTEM_INFO {DEVICE_FAMILY}
set_parameter_property "DEVICE_FAMILY" HDL_PARAMETER false
add_parameter "DEVICE" string "Stratix V"
set_parameter_property "DEVICE" HDL_PARAMETER false
set_parameter_property "DEVICE" VISIBLE false
set_parameter_property "DEVICE" SYSTEM_INFO {DEVICE}
set_parameter_property "DEVICE" HDL_PARAMETER false
add_parameter G_DATA_RATE FLOAT 700.0
set_parameter_property G_DATA_RATE DEFAULT_VALUE 700.0
set_parameter_property G_DATA_RATE DISPLAY_NAME "Data Rate (Mbps)"
set_parameter_property G_DATA_RATE TYPE FLOAT
set_parameter_property G_DATA_RATE UNITS None
set_parameter_property G_DATA_RATE DESCRIPTION "Number of bits used per pixel (18 or 24 are the only legal values)"
set_parameter_property G_DATA_RATE HDL_PARAMETER false
add_parameter G_BITS_PER_PIXEL INTEGER 24
set_parameter_property G_BITS_PER_PIXEL DEFAULT_VALUE 24
set_parameter_property G_BITS_PER_PIXEL DISPLAY_NAME "Bits per Pixel"
set_parameter_property G_BITS_PER_PIXEL TYPE INTEGER
set_parameter_property G_BITS_PER_PIXEL UNITS None
set_parameter_property G_BITS_PER_PIXEL ALLOWED_RANGES {18 24}
set_parameter_property G_BITS_PER_PIXEL DESCRIPTION "Number of bits used per pixel (18 or 24 are the only legal values)"
set_parameter_property G_BITS_PER_PIXEL HDL_PARAMETER true
add_parameter GT_RGB_DWIDTH INTEGER 23
set_parameter_property GT_RGB_DWIDTH TYPE INTEGER
set_parameter_property GT_RGB_DWIDTH DERIVED true
set_parameter_property GT_RGB_DWIDTH HDL_PARAMETER false
set_parameter_property GT_RGB_DWIDTH VISIBLE false
add_parameter GT_RGB_DEWIDTH INTEGER 1
set_parameter_property GT_RGB_DEWIDTH TYPE INTEGER
set_parameter_property GT_RGB_DEWIDTH DERIVED true
set_parameter_property GT_RGB_DEWIDTH HDL_PARAMETER false
set_parameter_property GT_RGB_DEWIDTH VISIBLE false
add_parameter GT_JEIDA_MAP BOOLEAN true
set_parameter_property GT_JEIDA_MAP DISPLAY_NAME "Utilize JEIDA 24bpp data mapping"
set_parameter_property GT_JEIDA_MAP DESCRIPTION "The default is to utilize JEIDA data mapping, instead of SPWG/PSWG/VESA mapping for 24bpp mode."
add_parameter G_JEIDA_MAP STD_LOGIC 0
set_parameter_property G_JEIDA_MAP TYPE STD_LOGIC_VECTOR
set_parameter_property G_JEIDA_MAP DERIVED true
set_parameter_property G_JEIDA_MAP HDL_PARAMETER true
set_parameter_property G_JEIDA_MAP ALLOWED_RANGES 0:1
set_parameter_property G_JEIDA_MAP VISIBLE false
add_parameter GT_DUALPIXEL BOOLEAN false
set_parameter_property GT_DUALPIXEL DISPLAY_NAME "Utilize dual-pixel mode"
set_parameter_property GT_DUALPIXEL DESCRIPTION "Dual-pixel mode will utilize an 8 channel LVDS interface, instead of a 4 channel interface."
add_parameter G_DUALPIXEL INTEGER 0
set_parameter_property G_DUALPIXEL TYPE INTEGER
set_parameter_property G_DUALPIXEL DERIVED true
set_parameter_property G_DUALPIXEL HDL_PARAMETER true
set_parameter_property G_DUALPIXEL VISIBLE false
add_display_item "Upstream Interface Options" "GT_CONTROLINTF" PARAMETER 
add_parameter GT_CONTROLINTF BOOLEAN false
set_parameter_property GT_CONTROLINTF DISPLAY_NAME "Clocked Video Output uses Control Port"
set_parameter_property GT_CONTROLINTF DESCRIPTION "Check this block if the interfacing CVO block uses the control port.  This option adds additional input signals to the RGB Data conduit, to avoid mismatch errors."



# 
# display items
# 


# 
# connection point reset
# 
add_interface reset reset end
set_interface_property reset associatedClock ""
set_interface_property reset synchronousEdges NONE
set_interface_property reset ENABLED true
set_interface_property reset EXPORT_OF ""
set_interface_property reset PORT_NAME_MAP ""
set_interface_property reset CMSIS_SVD_VARIABLES ""
set_interface_property reset SVD_ADDRESS_GROUP ""

add_interface_port reset RESET reset Input 1


# 
# connection point RGB_clk
# 
add_interface RGB_clk clock start
set_interface_property RGB_clk associatedDirectClock ""
set_interface_property RGB_clk clockRate 0
set_interface_property RGB_clk clockRateKnown false
set_interface_property RGB_clk ENABLED true
set_interface_property RGB_clk EXPORT_OF ""
set_interface_property RGB_clk PORT_NAME_MAP ""
set_interface_property RGB_clk CMSIS_SVD_VARIABLES ""
set_interface_property RGB_clk SVD_ADDRESS_GROUP ""

add_interface_port RGB_clk RGB_PCLK_OUT clk Output 1


# 
# connection point RGB_data
# 
add_interface RGB_data conduit end
set_interface_property RGB_data ENABLED true
set_interface_property RGB_data EXPORT_OF ""
set_interface_property RGB_data PORT_NAME_MAP ""
set_interface_property RGB_data CMSIS_SVD_VARIABLES ""
set_interface_property RGB_data SVD_ADDRESS_GROUP ""

add_interface_port RGB_data RGB_PCLK vid_clk Output 1
add_interface_port RGB_data RGB_DATA vid_data Input GT_RGB_DWIDTH
add_interface_port RGB_data RGB_V vid_v Input GT_RGB_DEWIDTH
add_interface_port RGB_data RGB_VSYNC vid_v_sync Input GT_RGB_DEWIDTH
add_interface_port RGB_data RGB_H vid_h Input GT_RGB_DEWIDTH
add_interface_port RGB_data RGB_HSYNC vid_h_sync Input GT_RGB_DEWIDTH
add_interface_port RGB_data RGB_DVALID vid_datavalid Input GT_RGB_DEWIDTH
add_interface_port RGB_data RGB_F vid_f Input GT_RGB_DEWIDTH
add_interface_port RGB_data RGB_UNDERFLOW underflow Input 1
add_interface_port RGB_data RGB_VID_CHANGE vid_mode_change Input 1
add_interface_port RGB_data RGB_VID_STD vid_std Input GT_RGB_DEWIDTH


# 
# connection point LDI_misc
# 
add_interface LDI_misc conduit end
set_interface_property LDI_misc associatedClock RGB_clk
set_interface_property LDI_misc associatedReset reset
set_interface_property LDI_misc ENABLED true
set_interface_property LDI_misc EXPORT_OF ""
set_interface_property LDI_misc PORT_NAME_MAP ""
set_interface_property LDI_misc CMSIS_SVD_VARIABLES ""
set_interface_property LDI_misc SVD_ADDRESS_GROUP ""

add_interface_port LDI_misc LDIPLL_LOCKED pll_locked Output 1


# 
# connection point LDI_refclk
# 
add_interface LDI_refclk clock end
set_interface_property LDI_refclk clockRate 0
set_interface_property LDI_refclk ENABLED true
set_interface_property LDI_refclk EXPORT_OF ""
set_interface_property LDI_refclk PORT_NAME_MAP ""
set_interface_property LDI_refclk CMSIS_SVD_VARIABLES ""
set_interface_property LDI_refclk SVD_ADDRESS_GROUP ""

add_interface_port LDI_refclk LDI_CLK_IN clk Input 1


# 
# connection point LDI_out
# 
add_interface LDI_out conduit end
set_interface_property LDI_out associatedClock ""
set_interface_property LDI_out ENABLED true
set_interface_property LDI_out EXPORT_OF ""
set_interface_property LDI_out PORT_NAME_MAP ""
set_interface_property LDI_out CMSIS_SVD_VARIABLES ""
set_interface_property LDI_out SVD_ADDRESS_GROUP ""

add_interface_port LDI_out LDI_CLK_OUT ldi_clk Output GT_RGB_DEWIDTH
add_interface_port LDI_out LDI_DATA_OUT ldi_data Output "(G_DUALPIXEL+1)*G_BITS_PER_PIXEL/6"

#
# "Generate" callback routine:
#   This process creates the top-level OpenLDI IP block and adds it as well as all sub-blocks to
#     the project.  It also invokes the MegaWizard to create the TX LVDS IP for older device families.
#
proc generate { entity_name } {
  # Set the variables that will be used to parameterize the TX LVDS IP blocks
  set DEVICE_FAMILY   [ get_parameter_value DEVICE_FAMILY ]
  set P_DATARATE [format "%.2f" [ get_parameter_value G_DATA_RATE ] ]
  set P_CLKFREQ  [format "%.6f" [expr {[get_parameter_value G_DATA_RATE] / 7.0 } ] ]
  set P_CLKPERIOD  [format "%.3f" [expr {7000.0 / [get_parameter_value G_DATA_RATE] } ] ]
#  set P_NUMCHAN [expr {4 * [expr { [ get_parameter_value G_DUALPIXEL ] + 1 } ] } ]
  set P_NUMCHAN [expr ([get_parameter_value G_DUALPIXEL] + 1) * ([get_parameter_value G_BITS_PER_PIXEL] / 6) + ([get_parameter_value G_DUALPIXEL] + 1)]
  # Define the terp file name
  set terp_path "OpenLDI_TX.vhd.terp"
  # Open the terp file for reading
  set terp_fd [open $terp_path]
  # Read the contents of the file
  set terp_contents [read $terp_fd]
  # Fetch the auto-generated entity name for the TXLDI_LVDS
  if {[expr {"$DEVICE_FAMILY" == "Cyclone IV E"} || {"$DEVICE_FAMILY" == "Cyclone IV GX"} \
         || {"$DEVICE_FAMILY" == "Cyclone V"}    || {"$DEVICE_FAMILY" == "Arria V"} \
         || {"$DEVICE_FAMILY" == "Stratix V"} ]} {
    set autogen_rxldilvds ${entity_name}_TXLDI_LVDS
  } else {
    set autogen_rxldilvds [get_instance_property TXLDI_LVDS HDLINSTANCE_GET_GENERATED_NAME]
  }
  # Set various parameter variables, which will be substituted in the terp file
  set terp_params(substitute_entity_name) $entity_name
  set terp_params(substitute_lvds_entity_name) ${autogen_rxldilvds}
  set terp_params(device_family) $DEVICE_FAMILY
  set terp_params(width_serial) [expr { $P_NUMCHAN - 1 }]
  set terp_params(width_parallel) [expr { $P_NUMCHAN * 7 - 1}]
  # Generate the top-level HDL file from the terp file
  set top_file_contents [altera_terp $terp_contents terp_params]
  # Add the generated top-level HDL file, as well as any other sub-blocks to the
  #   fileset for the TX OpenLDI IP
  add_fileset_file ${entity_name}.vhd VHDL TEXT $top_file_contents
  add_fileset_file rgb2openldi.vhd VHDL PATH rgb2openldi.vhd

  # If we are generating for an older device family, we need to use the MegaWizard flow to
  #   generate the TX LVDS block.  Newer deivces utilize the "add_hdl_instance" flow in the
  #   "elaborate" callback routine
  if {[expr {"$DEVICE_FAMILY" == "Cyclone IV E"} || {"$DEVICE_FAMILY" == "Cyclone IV GX"} \
         || {"$DEVICE_FAMILY" == "Cyclone V"}    || {"$DEVICE_FAMILY" == "Arria V"} \
         || {"$DEVICE_FAMILY" == "Stratix V"} ]} {
    # Truncate precision of input clock frequency for Cyclone IV families
    if {[expr {"$DEVICE_FAMILY" == "Cyclone IV E"} || {"$DEVICE_FAMILY" == "Cyclone IV GX"} ]} {
      set P_CLKFREQ  [format "%.2f" [expr {[get_parameter_value G_DATA_RATE] / 7.0 } ] ] }
    # Define the terp file name
    set terp_path "TXLDI_LVDS.vhd.terp"
    # Open the terp file for reading
    set terp_fd [open $terp_path]
    # Read the contents of the file
    set terp_contents [read $terp_fd]
    # Set various parameter variables, which will be substituted in the terp file
    set terp_params(device_family) $DEVICE_FAMILY
    set terp_params(data_rate) $P_DATARATE
    set terp_params(clk_freq) $P_CLKFREQ
    set terp_params(clk_period) $P_CLKPERIOD
    set terp_params(num_channels) $P_NUMCHAN
    # Create a file descriptor to a temporary file that will contain the parameters used by the MegaWizard.
    set terp_output_dir [create_temp_file ""]
    set top_level_file_path [file join $terp_output_dir "${entity_name}_TXLDI_LVDS.vhd"]
    set f_handle [open $top_level_file_path w+]
    # Generate the MegaWizard parameterization file from the terp file, and store the data to a variable
    set top_file_contents [altera_terp $terp_contents terp_params]
    # Write out the stored file data (from the above variable) to our temp file
    puts $f_handle $top_file_contents
    close $f_handle
    # Use the MegaWizard to read in the parameter file, and regenerate the complete IP file.
    exec qmegawiz -silent OPTIONAL_FILES=NONE $top_level_file_path
    # Add the IP file generated above to the fileset for the TX OpenLDI IP
    add_fileset_file ${entity_name}_TXLDI_LVDS.vhd VHDL PATH $top_level_file_path
  }
}

#
# "Elaborate" callback routine:
#   This process sets some of the derived variables used to parameterize the IP.  It also creates the
#     TX LVDS IP for 10-series and newer device families.
#
proc elaborate {} {
  # Optionally disable the unused signals, when the control interface on the interfacing CVO block isn't used
  if {! [ get_parameter_value GT_CONTROLINTF ]} {
    set_port_property RGB_VID_CHANGE termination true
    set_port_property RGB_VID_CHANGE termination_value 0
    set_port_property RGB_VID_STD termination true
    set_port_property RGB_VID_STD termination_value 0
  }
  if {[ get_parameter_value GT_JEIDA_MAP ] } {
    set_parameter_value G_JEIDA_MAP 1
  } else {
    set_parameter_value G_JEIDA_MAP 0
  }
  if {[ get_parameter_value GT_DUALPIXEL ] } {
    set_parameter_value G_DUALPIXEL 1
#    set P_NUMCHAN 9
    set_parameter_value GT_RGB_DWIDTH [expr [get_parameter_value G_BITS_PER_PIXEL] * 2 ]
    set_parameter_value GT_RGB_DEWIDTH 2
  } else {
    set_parameter_value G_DUALPIXEL 0
#    set P_NUMCHAN 5
    set_parameter_value GT_RGB_DWIDTH [get_parameter_value G_BITS_PER_PIXEL]
    set_parameter_value GT_RGB_DEWIDTH 1
  }
  set P_NUMCHAN [expr ([get_parameter_value G_DUALPIXEL] + 1) * ([get_parameter_value G_BITS_PER_PIXEL] / 6) + ([get_parameter_value G_DUALPIXEL] + 1)]
  #
  # This block generates the TX LVDS IP.
  #
  set DEVICE_FAMILY   [ get_parameter_value DEVICE_FAMILY ]
  # Create the "Altera LVDS SerDes" IP, if we are targeting an Arria 10 device
  if {[expr {"$DEVICE_FAMILY" == "Arria 10"} || {"$DEVICE_FAMILY" == "Stratix 10"} ]} {
    set P_DATARATE [format "%.1f" [ get_parameter_value G_DATA_RATE ] ]
    set P_CLKFREQ  [format "%.8f" [expr [get_parameter_value G_DATA_RATE] / 7.0 ]]
    add_hdl_instance TXLDI_LVDS altera_lvds
    if {[expr {"$DEVICE_FAMILY" == "Arria 10"} ]} {
      set_instance_parameter_value TXLDI_LVDS PLL_CORECLOCK_RESOURCE "Auto"
    }
    set_instance_parameter_value TXLDI_LVDS MODE "TX"
    set_instance_parameter_value TXLDI_LVDS NUM_CHANNELS "${P_NUMCHAN}"
    set_instance_parameter_value TXLDI_LVDS DATA_RATE "${P_DATARATE}"
    set_instance_parameter_value TXLDI_LVDS J_FACTOR "7"
    set_instance_parameter_value TXLDI_LVDS TX_OUTCLOCK_DIVISION "7"
    set_instance_parameter_value TXLDI_LVDS ENABLE_MIGRATABLE_PORT_MAPPINGS "true"
    set_instance_parameter_value TXLDI_LVDS INCLOCK_FREQUENCY "${P_CLKFREQ}"
    set_instance_parameter_value TXLDI_LVDS TX_EXPORT_CORECLOCK "true"
    set_instance_parameter_value TXLDI_LVDS TX_USE_OUTCLOCK "true"
    set_instance_parameter_value TXLDI_LVDS SYS_INFO_DEVICE [get_parameter_value DEVICE]
    set_instance_parameter_value TXLDI_LVDS SYS_INFO_DEVICE_FAMILY [get_parameter_value DEVICE_FAMILY]
    set_instance_parameter_value TXLDI_LVDS GENERATE_SDC_FILE "true"
    set_instance_parameter_value TXLDI_LVDS PLL_USE_RESET "true"
    set_instance_parameter_value TXLDI_LVDS TX_OUTCLOCK_PHASE_SHIFT "0"
    set_instance_parameter_value TXLDI_LVDS TX_REGISTER_CLOCK "tx_coreclock"
    set_instance_parameter_value TXLDI_LVDS USE_CLOCK_PIN "false"
    set_instance_parameter_value TXLDI_LVDS USE_EXTERNAL_PLL "false"
    set_instance_property TXLDI_LVDS HDLINSTANCE_USE_GENERATED_NAME 1
  # Create the "Altera Soft LVDS" IP, if we are targeting a Max 10 device
  } elseif {[ get_parameter_value DEVICE_FAMILY ]  == "MAX 10" } {
    set P_DATARATE [format "%.2f" [ get_parameter_value G_DATA_RATE ] ]
    set P_CLKFREQ  [format "%.2f" [expr [get_parameter_value G_DATA_RATE] / 7.0 ]]
    add_hdl_instance TXLDI_LVDS altera_soft_lvds
    set_instance_parameter_value TXLDI_LVDS FUNCTIONAL_MODE "TX"
    set_instance_parameter_value TXLDI_LVDS NUMBER_OF_CHANNELS "${P_NUMCHAN}"
    set_instance_parameter_value TXLDI_LVDS DESERIALIZATION_FACTOR "7"
    set_instance_parameter_value TXLDI_LVDS INPUT_DATA_RATE "${P_DATARATE}"
    set_instance_parameter_value TXLDI_LVDS VALID_FREQ "${P_CLKFREQ}"
    set_instance_parameter_value TXLDI_LVDS TX_INCLOCK_PHASE_SHIFT_UI "0.00"
    set_instance_parameter_value TXLDI_LVDS ENABLE_TX_LOCKED_PORT_UI "true"
    set_instance_parameter_value TXLDI_LVDS COMMON_RX_TX_PLL_UI "true"
    set_instance_parameter_value TXLDI_LVDS PLL_SELF_RESET_ON_LOSS_LOCK_UI "true"
    set_instance_parameter_value TXLDI_LVDS ENABLE_TX_CORECLOCK_PORT_UI "true"
    set_instance_parameter_value TXLDI_LVDS OUTCLOCK_DIVIDE_BY_UI "7"
    set_instance_property TXLDI_LVDS HDLINSTANCE_USE_GENERATED_NAME 1
  } 
}
